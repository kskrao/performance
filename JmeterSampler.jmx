<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Verify IPS HomePage" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1476790114000</longProp>
        <longProp name="ThreadGroup.end_time">1476790114000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\\Data\\Software\\chromedriver_win32\\chromedriver.exe</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Launch" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)&#xd;
var timeunit = java.util.concurrent.TimeUnit&#xd;
var NSE = org.openqa.selenium.NoSuchElementException.class&#xd;
var conditions = org.openqa.selenium.support.ui.ExpectedConditions&#xd;
var FWait = org.openqa.selenium.support.ui.FluentWait&#xd;
&#xd;
WDS.sampleResult.sampleStart()&#xd;
WDS.browser.get(&apos;https://3.64.77.94/&apos;)&#xd;
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)&#xd;
var timeunit = java.util.concurrent.TimeUnit&#xd;
var NSE = org.openqa.selenium.NoSuchElementException.class&#xd;
var conditions = org.openqa.selenium.support.ui.ExpectedConditions&#xd;
var FWait = org.openqa.selenium.support.ui.FluentWait&#xd;
&#xd;
WDS.sampleResult.sampleStart()&#xd;
WDS.browser.findElement(pkg.By.id(&apos;username&apos;)).sendKeys([&apos;admin&apos;])&#xd;
WDS.browser.findElement(pkg.By.id(&apos;password&apos;)).sendKeys([&apos;admin&apos;])&#xd;
WDS.browser.findElement(pkg.By.xpath(&quot;//input[@value=&apos;Sign In&apos;]&quot;)).click()&#xd;
var wait = new FWait(WDS.browser).withTimeout(100, timeunit.SECONDS).pollingEvery(1, timeunit.SECONDS).ignoring(NSE);&#xd;
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//span[contains(text(),&apos;Pipeline Management&apos;)]&quot;)))&#xd;
var getCount = WDS.browser.findElements(pkg.By.xpath(&quot;//span[contains(text(),&apos;Pipeline Management&apos;)]&quot;)).size()&#xd;
if(getCount==0) {&#xd;
    WDS.log.info( getCount + &apos;is the coubnt url&apos;) &#xd;
    WDS.sampleResult.successful = false&#xd;
    WDS.sampleResult.responseMessage = &apos;There were no Pipeline Management&apos;&#xd;
}    &#xd;
&#xd;
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="TCO Network" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var timeunit = java.util.concurrent.TimeUnit
var NSE = org.openqa.selenium.NoSuchElementException.class
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var FWait = org.openqa.selenium.support.ui.FluentWait

WDS.sampleResult.sampleStart()
var wait = new FWait(WDS.browser).withTimeout(15, timeunit.SECONDS).pollingEvery(1, timeunit.SECONDS).ignoring(NSE);
wait.until(conditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;#networkTab &gt; i&quot;)))
WDS.browser.findElement(pkg.By.cssSelector(&quot;#networkTab &gt; i&quot;)).click()
WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;Columbia Gas Transmission Corp&apos;]&quot;)).click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&quot;//h1[text()=&apos;Columbia Gas Transmission Corp&apos;]&quot;)))
var getTitle = WDS.browser.findElement(pkg.By.xpath(&quot;//h1[text()=&apos;Columbia Gas Transmission Corp&apos;]&quot;)).getText()

if(getTitle.contains(&quot;Columbia Gas Transmission Corp&quot;)) {
    WDS.log.info( getTitle + &apos;is the tile of the TCO network&apos;) 
    WDS.sampleResult.responseMessage = &apos;TCO network title is matching&apos;
} else{
    WDS.log.info( getTitle + &apos;is not title of the TCO network&apos;) 
    WDS.sampleResult.successful = false
    WDS.sampleResult.responseMessage = &apos;TCO network title is not matching&apos;
}
WDS.sampleResult.sampleEnd()

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Risk Tab View" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)&#xd;
var timeunit = java.util.concurrent.TimeUnit&#xd;
var NSE = org.openqa.selenium.NoSuchElementException.class&#xd;
var conditions = org.openqa.selenium.support.ui.ExpectedConditions&#xd;
var FWait = org.openqa.selenium.support.ui.FluentWait&#xd;
&#xd;
WDS.sampleResult.sampleStart()&#xd;
WDS.browser.findElement(pkg.By.cssSelector(&quot;#riskPill&quot;)).click()&#xd;
var wait = new FWait(WDS.browser).withTimeout(15, timeunit.SECONDS).pollingEvery(1, timeunit.SECONDS).ignoring(NSE);&#xd;
wait.until(conditions.presenceOfElementLocated(pkg.By.cssSelector(&quot;#pipelineTitle&quot;)))&#xd;
var getTitle = WDS.browser.findElement(pkg.By.cssSelector(&quot;#pipelineTitle&quot;)).getText()&#xd;
if(getTitle.contains(&quot;Pipeline Listing&quot;)) {&#xd;
    WDS.log.info( getTitle + &apos;is the title of the TCO networks tab view pipeline table&apos;) &#xd;
    WDS.sampleResult.responseMessage = &apos;TCO networks tab view pipeline table is matching&apos;&#xd;
} else{&#xd;
    WDS.log.info( getTitle + &apos;is not title of the TCO networks tab view pipeline table&apos;) &#xd;
    WDS.sampleResult.successful = false&#xd;
    WDS.sampleResult.responseMessage = &apos;TCO networks tab view pipeline table is not matching&apos;&#xd;
}&#xd;
&#xd;
WDS.sampleResult.sampleEnd()&#xd;
&#xd;
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Pipeline Search" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)&#xd;
var timeunit = java.util.concurrent.TimeUnit&#xd;
var NSE = org.openqa.selenium.NoSuchElementException.class&#xd;
var conditions = org.openqa.selenium.support.ui.ExpectedConditions&#xd;
var FWait = org.openqa.selenium.support.ui.FluentWait&#xd;
&#xd;
WDS.sampleResult.sampleStart()&#xd;
&#xd;
WDS.browser.findElement(pkg.By.cssSelector(&apos;#pipelineListingTable &gt; thead &gt; tr:nth-child(2) &gt; th:nth-child(4) &gt; input&apos;)).sendKeys([&quot;VM127&quot;])&#xd;
var wait = new FWait(WDS.browser).withTimeout(15, timeunit.SECONDS).pollingEvery(1, timeunit.SECONDS).ignoring(NSE);&#xd;
wait.until(conditions.textToBePresentInElement(pkg.By.cssSelector(&quot;#pipelineListingTable &gt; tbody &gt; tr:nth-child(1) &gt; td:nth-child(4)&quot;),&quot;VM127&quot;))&#xd;
var getPipeline = WDS.browser.findElement(pkg.By.cssSelector(&quot;#pipelineListingTable &gt; tbody &gt; tr:nth-child(1) &gt; td:nth-child(4)&quot;)).getText()&#xd;
if(getPipeline.contains(&quot;VM127&quot;)) {&#xd;
    WDS.log.info( getPipeline + &apos; is the searched pipeline of the TCO networks tab view pipeline table&apos;) &#xd;
    WDS.sampleResult.responseMessage = &apos;Searched pipeline in TCO networks tab view pipeline table is matching&apos;&#xd;
} else{&#xd;
    WDS.log.info( getPipeline + &apos;is not the searched pipeline of the TCO networks tab view pipeline table&apos;) &#xd;
    WDS.sampleResult.successful = false&#xd;
    WDS.sampleResult.responseMessage = &apos;Searched pipeline in TCO networks tab view pipeline table is not matching&apos;&#xd;
}&#xd;
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
          <stringProp name="DurationAssertion.duration">96000</stringProp>
        </DurationAssertion>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
